#!/usr/bin/env ruby
$VERBOSE = true

# build_book 
 
# Assumes scenes in section_dir are ordered.
# If TITLE given writes book/<TITLE>, otherwise TITLE is 
# the current working directory (uppercase) appended with an 
# underscore and an ISO 8601 compliant date string in YYYYMMDD format.
# For example, running this in tdw_1429_1 on 15 Jul 2018 gives:
#   TDW_1429_1_20180715 

# TODO:
# Add other bits; dedication, afterward, author bio, etc.
# Add option to have things out of order.
# Add reports for long words, reading grade level.
# Done: Add configfile.
# Done: Fix the stupid smart quotes and other non-ASCII characters.
#

require 'fileutils'
require 'optparse'
require 'psych'

$LOAD_PATH << File.expand_path('../lib', __dir__)
require 'bookbot'

defaults = {
  :book_dir     => 'book',
  :config_file  => 'book_config.yml',
  :chapter_dir  => 'chapters',
  :extra_dir    => 'extras',
  :pre_extras   => ['title_page', 'dedication', 'glossary'],
  :post_extras  => ['insider_information', 'afterward', 'author_bio', 'epilogue'],
  :report_dir   => 'reports',
  :report_file  => 'report.txt',
  :section_dir  => 'sections',
  :scrubbed_dir => 'scrubbed',
}

def make_title(defaults)
  if defaults[:title].nil?
    book_name_base = [defaults[:this_dir].upcase, defaults[:today]].join('_')
  else
    book_name_base = defaults[:title]
  end
  book_name_base.gsub!(/ /, '_')
  book_name = book_name_base.gsub(/[\W]/, '')
end

options             = Hash.new
options[:this_dir]  = Dir.pwd.split('/')[-1]
options[:today]     = Time.now.strftime("%Y%m%d")

option_parser = OptionParser.new do |opts|
  opts.on('-b BOOK_DIR', '--book', 'Output directory for the book') do |b|
    options[:book_dir] = b
  end
  opts.on('-c CONFIG', '--config', 'Configuration file') do |c|
    options[:config_file] = c
  end
  opts.on('-s SECTION_DIR', '--sections', 'Where the sections are') do |s|
    options[:section_dir] = s 
  end
  opts.on('-t TITLE', '--title', 'Title of the book') do |t|
    options[:title] = t
  end
end
option_parser.parse!

if options.has_key?(:config_file) and File.readable?(options[:config_file])
  configs   = Psych.load_file(options[:config_file])
elsif File.readable?(defaults[:config_file])
  configs   = Psych.load_file(defaults[:config_file])
else
  configs   = Hash.new
end

[configs, options].each { |h|
  if h.count > 0
    h.transform_keys! { |k| k.to_sym }
    defaults.merge!(h)
  end
}

book_name       = make_title(defaults)
book_dir        = defaults[:book_dir]
book_file       = File.join(book_dir, book_name)
extra_dir       = defaults[:extra_dir]
post_extras     = defaults[:post_extras]
pre_extras      = defaults[:pre_extras]
report_dir      = defaults[:report_dir]
report_file     = File.join(report_dir, defaults[:report_file])
scrubbed_dir    = defaults[:scrubbed_dir]
section_dir     = defaults[:section_dir]
sections        = Hash.new

[scrubbed_dir, report_dir, book_dir].each { |dir|
  Dir.mkdir(dir) unless dir
}

if File.directory?(section_dir)
  section_list  = Dir.entries(section_dir)
  section_files = Array.new
  section_list.each { |f| 
    file_name = File.join(section_dir, f)
    section_files << f unless File.directory?(file_name) 
  }
  section_files.sort!
else
  puts("Need sections.")
  exit
end

# Need to figure out how to put these three types together,
# and deal with them better.
pre_extras.each { |f|
  file_name = extra_dir + '/' + f + '.txt'
  if File.file? file_name
    section = BookBot::Section.new(file_name)
    sections[section.file_name_label] = section
  end
}
      
chapter_count = 1
section_files.each do |section_file|
  if section_file.end_with?('.txt')
    section = BookBot::Section.new("#{section_dir}/#{section_file}")
    section.chapter_number = chapter_count
    chapter_count += 1
    sections[section.file_name_label] = section
  else
    puts "File name is #{section_file}"
    puts "Files need to end in .txt."
  end
end

post_extras.each { |f|
  file_name = extra_dir + '/' + f + '.txt'
  if File.file? file_name
    section = BookBot::Section.new(file_name)
    sections[section.file_name_label] = section
  end
}

data              = Hash.new
data[:title]      = defaults[:title]
data[:pre]        = pre_extras
data[:post]       = post_extras
data[:book_dir]   = book_dir
data[:sections]   = sections

book = BookBot::Book.new(data)
book.write_text

